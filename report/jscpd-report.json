{
  "statistics": {
    "detectionDate": "2025-10-13T22:41:56.002Z",
    "formats": {
      "typescript": {
        "sources": {
          "src/test/test-isolation.smoke.test.ts": {
            "lines": 104,
            "tokens": 578,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test/test-isolation.integration.test.ts": {
            "lines": 152,
            "tokens": 1142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test/context-aware-commands.test.ts": {
            "lines": 91,
            "tokens": 909,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 152,
            "percentage": 17.58,
            "percentageTokens": 16.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/session-manager.test.ts": {
            "lines": 157,
            "tokens": 1555,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/install-hodge-way.test.ts": {
            "lines": 122,
            "tokens": 1201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/id-manager.test.ts": {
            "lines": 285,
            "tokens": 2784,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/claude-commands.smoke.test.ts": {
            "lines": 260,
            "tokens": 2026,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib/__tests__/context-manager.test.ts": {
            "lines": 89,
            "tokens": 979,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 152,
            "percentage": 17.98,
            "percentageTokens": 15.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/commands/review.smoke.test.ts": {
            "lines": 165,
            "tokens": 1338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/commands/plan.test.ts": {
            "lines": 450,
            "tokens": 4105,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 80,
            "duplicatedTokens": 706,
            "percentage": 17.78,
            "percentageTokens": 17.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/commands/decide.smoke.test.ts": {
            "lines": 130,
            "tokens": 1297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 2005,
          "tokens": 17914,
          "sources": 11,
          "clones": 4,
          "duplicatedLines": 56,
          "duplicatedTokens": 505,
          "percentage": 2.79,
          "percentageTokens": 2.82,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 2005,
      "tokens": 17914,
      "sources": 11,
      "clones": 4,
      "duplicatedLines": 56,
      "duplicatedTokens": 505,
      "percentage": 2.79,
      "percentageTokens": 2.82,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ", () => {\n  let fixture: TempDirectoryFixture;\n  let testDir: string;\n  let contextManager: ContextManager;\n\n  beforeEach(async () => {\n    fixture = new TempDirectoryFixture();\n    testDir = await fixture.setup();\n    await mkdir(path.join(testDir, '.hodge'), { recursive: true });\n    contextManager = new ContextManager(testDir);\n  });\n\n  afterEach(async () => {\n    await fixture.cleanup();\n  });\n\n  it('should create a ContextManager instance'",
      "tokens": 0,
      "firstFile": {
        "name": "src/lib/__tests__/context-manager.test.ts",
        "start": 8,
        "end": 24,
        "startLoc": {
          "line": 8,
          "column": 25,
          "position": 90
        },
        "endLoc": {
          "line": 24,
          "column": 42,
          "position": 242
        }
      },
      "secondFile": {
        "name": "src/test/context-aware-commands.test.ts",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 48,
          "position": 129
        },
        "endLoc": {
          "line": 27,
          "column": 45,
          "position": 281
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "mkdirSync(path.join(tmpDir, '.hodge'), { recursive: true });\n    mkdirSync(path.join(tmpDir, '.hodge', 'features'), { recursive: true });\n\n    command = new PlanCommand(tmpDir);\n  });\n\n  afterEach(async () => {\n    // Cleanup temp directory\n    await fixture.cleanup();\n  });\n\n  smokeTest('should detect and use AI-generated plan file'",
      "tokens": 0,
      "firstFile": {
        "name": "src/commands/plan.test.ts",
        "start": 287,
        "end": 298,
        "startLoc": {
          "line": 287,
          "column": 5,
          "position": 2566
        },
        "endLoc": {
          "line": 298,
          "column": 47,
          "position": 2672
        }
      },
      "secondFile": {
        "name": "src/commands/plan.test.ts",
        "start": 20,
        "end": 31,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 185
        },
        "endLoc": {
          "line": 31,
          "column": 56,
          "position": 291
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ",\n      createdAt: new Date().toISOString(),\n    };\n\n    await fs.writeFile(path.join(aiPlanDir, 'plan.json'), JSON.stringify(aiPlan, null, 2));\n\n    // Create minimal required files\n    const featureDir = path.join(tmpDir, '.hodge', 'features', feature);\n    mkdirSync(featureDir, { recursive: true });\n\n    await fs.writeFile(\n      path.join(tmpDir, '.hodge', 'decisions.md'),\n      `# Decisions\\n\\n### 2025-09-30 - Test\\n\\n**Context**:\\nFeature: ${feature}\\n\\n**Decision**:\\nTest\\n\\n---\\n`\n    );\n\n    // Execute plan command\n    await command.execute({ feature, lanes: 1 });\n\n    // Verify the AI plan was used",
      "tokens": 0,
      "firstFile": {
        "name": "src/commands/plan.test.ts",
        "start": 372,
        "end": 390,
        "startLoc": {
          "line": 372,
          "column": 2,
          "position": 3334
        },
        "endLoc": {
          "line": 390,
          "column": 31,
          "position": 3496
        }
      },
      "secondFile": {
        "name": "src/commands/plan.test.ts",
        "start": 308,
        "end": 326,
        "startLoc": {
          "line": 308,
          "column": 2,
          "position": 2771
        },
        "endLoc": {
          "line": 326,
          "column": 62,
          "position": 2933
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ");\n\n    // Create minimal required files\n    const featureDir = path.join(tmpDir, '.hodge', 'features', feature);\n    mkdirSync(featureDir, { recursive: true });\n\n    await fs.writeFile(\n      path.join(tmpDir, '.hodge', 'decisions.md'),\n      `# Decisions\\n\\n### 2025-09-30 - Test\\n\\n**Context**:\\nFeature: ${feature}\\n\\n**Decision**:\\nTest\\n\\n---\\n`\n    );\n\n    // Should not crash, should fall back to keyword matching",
      "tokens": 0,
      "firstFile": {
        "name": "src/commands/plan.test.ts",
        "start": 407,
        "end": 418,
        "startLoc": {
          "line": 407,
          "column": 19,
          "position": 3716
        },
        "endLoc": {
          "line": 418,
          "column": 58,
          "position": 3801
        }
      },
      "secondFile": {
        "name": "src/commands/plan.test.ts",
        "start": 312,
        "end": 323,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 2823
        },
        "endLoc": {
          "line": 323,
          "column": 24,
          "position": 2908
        }
      }
    }
  ]
}