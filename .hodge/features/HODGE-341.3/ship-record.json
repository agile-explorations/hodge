{
  "feature": "HODGE-341.3",
  "timestamp": "2025-10-12T09:38:21.665Z",
  "issueId": "HODGE-341.3",
  "pmTool": "linear",
  "validationPassed": true,
  "shipChecks": {
    "tests": true,
    "coverage": true,
    "docs": true,
    "changelog": true
  },
  "commitMessage": "feat: add critical file selection algorithm for risk-based code review\n\nImplement intelligent file prioritization for AI code review during harden phase.\nThe algorithm identifies the highest-risk files for deep review based on multiple\nfactors, reducing AI token usage and improving review focus.\n\n## What Changed\n\n### New Services (4 files, ~1,200 LOC)\n- `ImportAnalyzer`: Analyzes import fan-in across project to identify high-impact files\n- `SeverityExtractor`: Extracts severity levels from tool output using keyword matching\n- `CriticalFileSelector`: Risk-based scoring algorithm combining multiple factors\n- `CriticalFilesReportGenerator`: Markdown report generation for AI consumption\n\n### Enhanced Commands\n- `HardenCommand`: Integrated critical file selection into `--review` mode workflow\n  - Moved quality checks execution into review mode for complete context\n  - Generates critical-files.md alongside existing review artifacts\n- Updated `/harden` slash command template with new review steps\n\n### Configuration & Quality Fixes\n- **Dependencies**: Moved `js-yaml`, `micromatch`, `@linear/sdk`, `strip-ansi` to runtime dependencies\n- **TypeScript**: Fixed `TS5042` error by removing `${files}` from tsc command\n- **Prettier**: Removed conflicting `--list-different` flag\n- **Semgrep**: Fixed YAML syntax in 3 custom security rules (pattern-not-inside nesting)\n- **Dependency-cruiser**: Excluded `src/test/` from dev-dependency restrictions\n- **Toolchain**: Added 2s timeout to `getToolVersion()` to prevent test hangs\n\n### Tests (11 smoke tests)\n- `critical-file-selector.smoke.test.ts`: Validates all critical file selection components\n- Increased timeouts (10s â†’ 20s) for registry-based detection tests under load\n\n### Documentation\n- Updated `.hodge/toolchain.yaml` with `max_critical_files` and `critical_paths` settings\n- Enhanced `.claude/commands/harden.md` with critical file review workflow\n- Added `.hodge/principles.md` content\n\n## Why This Change\n\n**Problem**: AI cannot efficiently review 50-100 changed files during harden phase,\nleading to token budget exhaustion and incomplete reviews.\n\n**Solution**: Risk-weighted algorithm selects top N files (default: 10) for deep review\nbased on:\n- Tool diagnostics (blockers, warnings, errors)\n- Import fan-in analysis (architectural impact radius)\n- Lines changed (change magnitude)\n- Critical paths (configured + inferred from imports)\n- File characteristics (new files weighted higher)\n\n**Integration**: Generates `critical-files.md` during `hodge harden --review`, providing\nAI with prioritized file list alongside existing review-manifest.yaml and quality-checks.md.\n\n## Impact\n\n### For AI Code Review\n- **Reduced Token Usage**: Reviews 10 highest-risk files instead of all 100 changed files\n- **Better Focus**: AI spending time on files that matter most (blockers, high fan-in)\n- **Transparency**: Shows scoring factors and reasoning in markdown report\n\n### For Developers\n- **Faster Reviews**: Harden phase completes quicker with targeted review\n- **Risk Visibility**: Critical-files.md report shows which files need extra attention\n- **Configurable**: Can adjust `max_critical_files` and add project-specific `critical_paths`\n\n### Quality Improvements\n- Fixed 5 blocking quality issues discovered during harden:\n  - TypeScript configuration error\n  - Prettier configuration conflict\n  - Test timeout issues\n  - Dependency architecture violations\n  - Semgrep rule syntax errors\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
}