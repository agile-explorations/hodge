{
  "feature": "HODGE-327.1",
  "timestamp": "2025-10-04T15:13:42.693Z",
  "issueId": null,
  "pmTool": "linear",
  "validationPassed": true,
  "shipChecks": {
    "tests": true,
    "coverage": true,
    "docs": true,
    "changelog": true
  },
  "commitMessage": "feat: add AI-driven code review system with profile-based quality criteria (HODGE-327.1)\n\n## What Changed\n\n**Core Review Infrastructure** (6 new files, net +838 lines):\n- src/types/review-profile.ts: TypeScript schema for profiles, criteria, findings, reports\n- src/lib/profile-loader.ts: YAML profile loading and validation\n- src/lib/context-aggregator.ts: Automatic loading of standards/principles/patterns/lessons\n- src/commands/review.ts: CLI command for `/review file <path>` functionality\n- .hodge/review-profiles/default.yml: Universal code quality profile (8 criteria, 6 languages)\n- .claude/commands/review.md: AI slash command template for architectural analysis\n\n**Test Coverage** (2 new files, net +352 lines, 13 tests):\n- src/commands/review.smoke.test.ts: 8 smoke tests validating infrastructure\n- src/commands/review.integration.test.ts: 5 integration tests for end-to-end flow\n\n**Template Sync** (1 file):\n- src/lib/claude-commands.ts: Auto-synced review.md template content\n\n**Metadata Updates** (7 files):\n- .hodge/HODGE.md, .hodge/.session, .hodge/context.json: PM tracking synchronized\n- .hodge/development-plan.json, id-counter.json, id-mappings.json, project_management.md: Epic/story tracking\n\n## Why This Change\n\nThe `/review` command was outdated and referenced non-existent functionality. Investigation showed ESLint can't catch architectural smells (coupling, SRP violations, pattern proliferation). This feature provides AI-driven architectural review through a layered quality system:\n\n**Layer 1 (Highest Priority)**: Project-specific standards, principles, patterns, lessons\n**Layer 2**: Profile domain defaults (react-components.yml, api-design.yml)\n**Layer 3**: Universal baseline (default.yml)\n\nContext automatically merges all layers, with project standards overriding profile defaults. This enables sophisticated code quality analysis while maintaining full user control (no auto-fix, recommendations only).\n\n## Impact\n\nâœ… **User Experience**:\n- `/review file src/example.ts` provides instant architectural feedback\n- Each finding includes file:line reference and suggested `/explore` command\n- 3-level severity (blocker/warning/suggestion) guides prioritization\n- Custom instructions support domain-specific analysis\n\nâœ… **Code Quality**:\n- Detects lessons-learned violations (blockers)\n- Catches coupling, SRP, DRY issues automated tools miss\n- Reviews slash command quality and CLI/template integration\n- 13 tests (8 smoke + 5 integration), all passing\n\nâœ… **Architecture**:\n- Profile-based extensibility (Kotlin, Python, Java, Go, TypeScript, JavaScript)\n- Layered review system respects project conventions\n- YAML profiles leverage AI natural language understanding\n- Zero dependencies on external review services\n\nCloses HODGE-327.1\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>"
}