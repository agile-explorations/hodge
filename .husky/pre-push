#!/bin/sh

# Pre-push quality checks for Hodge
# Based on Smart Selective Checks approach (HODGE-295)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Performance timing
START_TIME=$(date +%s)

# Configuration
CACHE_DIR=".hodge/.cache"
AUDIT_CACHE_FILE="$CACHE_DIR/npm-audit-cache.json"
CACHE_DURATION_HOURS=24
MAX_EXECUTION_TIME=5

# Protected branch patterns
PROTECTED_BRANCHES="^(main|develop|release/.*|hotfix/.*)$"

echo "${BLUE}🔍 Running pre-push quality checks...${NC}"

# Function to get the target branch
get_target_branch() {
  # Parse git push arguments to determine target branch
  while read local_ref local_sha remote_ref remote_sha
  do
    # Extract branch name from refs/heads/branch-name
    if [[ "$remote_ref" =~ refs/heads/(.*) ]]; then
      echo "${BASH_REMATCH[1]}"
      return 0
    fi
  done

  # Fallback to current branch if not found
  git rev-parse --abbrev-ref HEAD
}

# Function to check if branch is protected
is_protected_branch() {
  local branch=$1
  if [[ "$branch" =~ $PROTECTED_BRANCHES ]]; then
    return 0
  else
    return 1
  fi
}

# Function to check if npm audit cache is valid
is_audit_cache_valid() {
  if [ ! -f "$AUDIT_CACHE_FILE" ]; then
    return 1
  fi

  # Check if package-lock.json has been modified
  if git diff HEAD --name-only | grep -q "package-lock.json"; then
    echo "${YELLOW}ℹ package-lock.json modified, invalidating audit cache${NC}"
    return 1
  fi

  # Check cache age (24 hours = 86400 seconds)
  local cache_age=$(($(date +%s) - $(stat -f "%m" "$AUDIT_CACHE_FILE" 2>/dev/null || echo 0)))
  local max_age=$((CACHE_DURATION_HOURS * 3600))

  if [ $cache_age -gt $max_age ]; then
    echo "${YELLOW}ℹ Audit cache expired (>24 hours old)${NC}"
    return 1
  fi

  return 0
}

# Function to run npm audit with caching
run_npm_audit() {
  local audit_level="moderate"

  if is_audit_cache_valid; then
    echo "${GREEN}✓ Using cached npm audit results${NC}"
    cat "$AUDIT_CACHE_FILE"
    return 0
  fi

  echo "${BLUE}Running npm audit (audit-level: $audit_level)...${NC}"

  # Create cache directory if it doesn't exist
  mkdir -p "$CACHE_DIR"

  # Run audit and cache the result
  if npm audit --audit-level="$audit_level" > "$AUDIT_CACHE_FILE" 2>&1; then
    echo "${GREEN}✓ No vulnerabilities found${NC}"
    return 0
  else
    echo "${RED}✗ Security vulnerabilities detected:${NC}"
    cat "$AUDIT_CACHE_FILE"
    echo ""
    echo "${YELLOW}Fix with: npm audit fix${NC}"
    return 1
  fi
}

# Function to run prettier check
run_prettier_check() {
  echo "${BLUE}Running Prettier check on all files...${NC}"

  if npx prettier --check . > /dev/null 2>&1; then
    echo "${GREEN}✓ All files are properly formatted${NC}"
    return 0
  else
    echo "${RED}✗ Formatting issues detected${NC}"
    echo "${YELLOW}Fix with: npx prettier --write .${NC}"

    # Show which files need formatting
    echo ""
    echo "Files needing formatting:"
    npx prettier --check . 2>&1 | grep "^\[" | head -10
    echo ""

    return 1
  fi
}

# Main execution
main() {
  local target_branch=$(get_target_branch)
  local exit_code=0

  echo "${BLUE}Target branch: $target_branch${NC}"

  # Always run prettier check (fast, ~1-2 seconds)
  if ! run_prettier_check; then
    exit_code=1
  fi

  # Run npm audit for protected branches or when forced
  if is_protected_branch "$target_branch" || [ "$HODGE_STRICT" = "true" ]; then
    echo "${BLUE}Protected branch detected - running full checks${NC}"
    if ! run_npm_audit; then
      exit_code=1
    fi
  else
    echo "${GREEN}✓ Skipping npm audit for feature branch (use HODGE_STRICT=true to force)${NC}"
  fi

  # Check execution time
  END_TIME=$(date +%s)
  EXECUTION_TIME=$((END_TIME - START_TIME))

  if [ $EXECUTION_TIME -gt $MAX_EXECUTION_TIME ]; then
    echo "${YELLOW}⚠ Pre-push checks took ${EXECUTION_TIME}s (target: <${MAX_EXECUTION_TIME}s)${NC}"
  else
    echo "${GREEN}✓ Checks completed in ${EXECUTION_TIME}s${NC}"
  fi

  # Final status
  if [ $exit_code -eq 0 ]; then
    echo "${GREEN}✅ All pre-push checks passed!${NC}"
  else
    echo "${RED}❌ Pre-push checks failed. Fix issues or use --no-verify to bypass.${NC}"
  fi

  exit $exit_code
}

# Run main unless --no-verify is used (respects standard Git convention)
main